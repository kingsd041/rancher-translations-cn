accountsPage:
  detail:
    header: 用户信息
    table:
      cluster:
        description: 授予此用户的单个集群的角色
        noRoles: 此用户没有集群角色
        title: 集群角色
      global:
        admin: 此用户是管理员并拥有所有权限
        description: 访问管理影响整个安装的事情
        noRoles: 此用户没有全局角色
        readOnlyAdmin: 此用户是只读管理员并对下级集群对象拥有只读权限
        title: 全局角色
      headers:
        active: 激活
        clusterName: 集群
        created: 已授权
        group: 用户组
        permission: 权限
        projectName: 项目
        role: 角色
      project:
        description: 授予此用户的单个项目的角色
        noRoles: 此用户没有项目角色
        title: 项目角色
      roles:
        title: 角色
  editGroup:
    header: 编辑组
  groups:
    header: 用户组
    table:
      globalRole: 全局角色名称
      groupName: 组名称
      noData: 没有定义组。
      noMatch: 没有组匹配当前搜索
      noName: None
  index:
    groupLink: 分配全局角色
    header: 用户列表
    localLink: 添加用户
    table:
      id: 用户 ID
      identity: 标识
      kind: 类型
      noData: 目前还没有用户
      noMatch: 没有用户匹配当前搜索
      noName: 无
      username: 本地用户名
  modal:
    password: 修改密码
  new:
    errors:
      pwReq: 必须设置密码。
      role: 新用户需要具备角色，从列表中选择角色。
      strengthError: 密码强度弱
      usernameInExists: 用户名已存在，请设置新的用户名。
      usernameReq: 必须填写用户名。
    form:
      description:
        labelText: 描述
        placeholder: "例如: 这是 John Smith 的账号"
      name:
        labelText: 显示名称
        placeholder: "例如: John Smith"
      password:
        labelText: 密码
      type:
        labelText: 账号类型
      username:
        labelText: 用户名
        placeholder: "例如: jsmith"
    header: 添加用户
  newGroup:
    errors:
      group: 需要指定组。
      role: 需要指定角色
    form:
      group:
        labelText: 选择要添加的组
    header: 将全局角色分配给组
    warning: 为组分配全局角色只能与支持组的外部 auth 提供程序一起工作。本地授权不支持组。
buildDetailPage:
  duration: 构建时间
  header: "流水线运行: #{name}"
  log:
    detail: 当前流水线运行的详细日志。
    loading: 加载中...
    title: 详细日志
    waiting: 请等待...
  stillRunning: 仍在运行
clusterCatalogPage:
  header: 应用商店
clusterDashboard:
  alert:
    component: "警告: 组件 {component} 不健康。"
    node: "警告: 节点 {node} 未激活。"
    nodeCondition:
      diskPressure: "警告: 节点 {node} 有磁盘压力。"
      memoryPressure: "警告: 节点 {node} 有内存压力。"
      outOfDisk: "警告: 节点 {node} 磁盘空间不足。"
  clusterHasNoNodes: 添加节点
  clusterNotReady: 集群中的图形信息当前不可用
  controllerManager: Controller Manager
  controllerManagerUnavailable: Controller Manager 不可用
  cpu: CPU
  enableMonitoring: 启用监控以查看实时监控
  etcd: Etcd
  etcdUnavailable: Etcd 不可用
  importHost: 导入节点
  k3sInfo:
    detail: 导入的 K3S 集群节点系统信息。
    nodeArgs:
      detail: 此节点的 K3s 启动参数的只读列表。
      noArgs: 没有节点参数
      title: k3s 节点参数
    title: k3s 集群信息
  liveTitle: 已使用 {total} 中的 {used}
  memory: Memory
  monitoringNotReady: 监控 API 未就绪
  more: 更多
  noRancherComponents: 在此集群中没有启用 {appName} 日志收集，或者没有足够的数据用于图形展示。
  node: Nodes
  notActive: 当前集群状态 <b>{state}</b>.
  notReady: 当前集群 <b>{state}</b> 中...，在 API 准备就绪之前，直接与 API 交互的功能将不可用。
  pods: Pods
  reserved: 已预留
  scheduler: Scheduler
  schedulerUnavailable: Scheduler 不可用
  sections:
    cluster: 集群监控
    etcd: Etcd 监控
    k8s: Kubernetes 组件监控
    node: 节点监控
    rancher: "{appName} 日志收集功能监控"
  subtitle:
    reserved: 已预留 {total} 中的 {used}
    used: 已使用 {total} 中的 {used}
  systemProject: 这是包含所有 Kubernetes 和 {appName} 系统命名空间的系统项目，修改当前项目中的资源配置可能会导致系统无法正常运行。
  title: 仪表盘
  upgradeAvailable: 监控有新版本 {version} 可用升级
  used: 已使用
  value: 值
clusterRibbonNav:
  title: 最近创建的集群
confirmDelete:
  cancelAction: 取消
  clearHarborConfig: 你确认要移除 Harbor 配置吗？
  clusterNote: "注意: 通过云提供商驱动创建的相关资源(如卷、负载均衡器和网络)不会自动删除。"
  clusterRoleTemplateBindingNote: "注意: 不会删除用户的项目权限。"
  confirmAction: 删除
  emptyPod: 0 个 pod
  environmentNote: "注意: 该项目中的所有资源都将被永久删除，包括通过 {appName} 创建的所有命名空间。"
  forceDelete:
    label: 强制删除
    warning: "重要提示: 强制删除 Pod 并不等待确认 Pod 中的进程是否终止，这可能导致这些进程一直运行，直到节点检测到并完成优雅的删除。如果您的进程使用共享存储或与远程 API 通信，并且依赖于 pod 的名称来标识自己，那么强制删除这些 pod 可能导致多个进程使用相同的标识运行在不同的机器上，这可能导致数据损坏或不一致。只有在确定 Pod 已终止，或者应用程序可以同时运行同一 pod 的多个副本时，才强制删除 pod。此外，如果强制删除 Pod，调度器可能会在节点释放这些资源之前在这些节点上运行新的 Pod，并导致这些 Pod 立即被驱逐。"
  globalRoleNote: "{count, plural,\n=0 {No users are assigned this role.}\n=1 {# user is assigned this role.}\nother {# users are assigned this role.}\n}\n"
  largeDeleteText: "\"{key}\" 及 {othersCount} 其他"
  protip: "提示: 按住 {key} 键，同时点击 Delete 以绕过此确认。"
  resourceType:
    cluster: 集群
    ip: IP
    namespace: 命名空间
    project: 项目
    subnet: Subnet
    workload: 工作负载
  systemChartNote: 您正在删除一个系统应用程序。如果删除该应用程序，可能会导致集群出现问题。
  systemProjectNamespaceNote: "注意: 您正在删除系统项目下的命名空间。如果将其移除，可能会导致集群不能正常运行。"
  systemProjectNote: "注意: 您正在删除系统项目。如果将其移除，可能会导致集群不能正常运行"
  titleWithResourceType: 您确定要删除 <b>{resourceType}</b> 吗？
  titleWithoutResourceType: 您确定要删除吗？
  twoNodeEtcd: 从两个节点的集群中删除 ETCD 节点被认为是不安全的! 我们强烈建议您在删除一个节点之前将 ETCD 节点数增加到三个或更多节点。
containerPage:
  envTab:
    detail: 在创建容器时配置到容器内的环境变量。
    header: 环境变量
  header: "容器: {name}"
  initContainer:
    label: 初始化容器
  linksTab:
    detail: 这些属性显示了其他容器和当前容器之间的链接。
    header: 链接
    noData: 当前容器没有链接
  pod: Pod
  portsTab:
    detail: 容器中进程监听的端口与主机端口的映射关系。
    header: 端口
    hostPrimaryIp: ({ip})
  volumesTab:
    detail: 这些属性显示了附加到容器的数据卷。
    header: 数据卷
    table:
      noContainers: 无其他容器
      noData: 该容器未使用数据卷
      noMatch: 没有符合当前搜索的数据卷
      path: 挂载点
      shared: 共享
      writable: 可写
containerShell:
  permissionDenied: 无权访问
  protip: "高级技巧: 点击运行命令行时按住 {key} 键在新窗口中打开"
  status:
    closed: 已关闭
    code: " 状态码: {code}"
    connected: 已连接
    connecting: 连接中...
    disconnected: 已断开
    error: "错误: {error}"
    initializing: 初始化...
cruDestinationRule:
  connectionPool:
    connectTimeout:
      help: TCP 连接超时。
      label: TCP 连接超时
      placeholder: "例如: 30ms"
    detail: 配置到上游服务的连接量
    http1MaxPendingRequests:
      help: 到目标端的最大请求等待数
      label: HTTP1 最大等待请求
      placeholder: "例如: 1024"
    http2MaxRequests:
      help: 到后端请求的最大数量。
      label: HTTP2 最大等待请求
      placeholder: "例如: 1024"
    label: 连接池
    maxConnections:
      help: 到目标主机的 HTTP1/TCP 连接的最大数量。
      label: TCP 最大连接数
      placeholder: "例如: 1024"
    maxRequestsPerConnection:
      help: 到后端连接的每个连接的最大请求数。将此参数设置为 1 将禁用 keep alive。
      label: 每个连接的 HTTP 最大请求
      placeholder: "例如: 10"
    maxRetries:
      help: 在给定时间内，集群中所有主机都可以执行的最大重试次数。
      label: HTTP 最大重试
      placeholder: "例如: 1024"
  host:
    error: 主机是必需的。
  loadBalancer:
    consistentHash:
      httpCookie:
        name:
          error: 需要 Cookie 名称。
          label: Cookie 名称
          placeholder: "例如: username"
        path:
          label: Cookie 路径
          placeholder: "例如: /"
        ttl:
          error: TTL 是必需的。
          label: TTL
          placeholder: "例如: 0s"
      httpHeaderName:
        error: 必须设置 HTTP Header 名称。
        label: HTTP Header 名称
        placeholder: "例如: end-user"
      label: 使用一致的基于散列的负载平衡实现软会话关联
      minimumRingSize:
        label: 最小 Ring
        placeholder: "例如: 1024"
      mode:
        cookie:
          label: 基于 HTTP cookie 的 Hash
        header:
          label: 基于特定 HTTP 头的哈希
        label: Hash 模式
        sourceIp:
          label: 基于源 IP 地址的哈希
    detail: 配置负载平衡器算法
    label: Load Balancer
    simple:
      label: 使用标准的负载平衡算法
      leastConn:
        label: 最小请求
      passthrough:
        label: 透传
      random:
        label: 随机
      roundRobin:
        label: 轮询
  name:
    placeholder: "例如: myrule"
  outlierDetection:
    baseEjectionTime:
      help: 最小驱逐时间. 主机将保持被弹出的时间等于最小弹出持续时间和主机被弹出的次数的乘积。
      label: 基本驱逐时间
      placeholder: "例如: 30s"
    consecutiveErrors:
      help: 从连接池中弹出主机之前的错误数。
      label: 连续错误
      placeholder: "例如: 5"
    detail: 配置从负载平衡池中移除不健康主机
    interval:
      help: 弹射扫描分析之间的时间间隔。
      label: 时间间隔
      placeholder: "例如: 10s"
    label: 异常值检测
    maxEjectionPercent:
      help: 负载均衡池中上游服务可被弹出的主机的最大百分比 %。
      label: 最大驱逐百分比
      placeholder: "例如: 10"
  port:
    label: Port
    placeholder: "例如: 8080 or myport"
  subsets:
    addSubsetLabel: Add Subset
    label: Subsets
    labels:
      error: 请为子集至少设置一个标签。
    name:
      error: 子网名称需要设置.
      label: Name
      placeholder: "例如: v1"
    noSubsets: No Subsets
    removeSubsetLabel: Remove Subset
  title:
    edit: 编辑目标规则
    new: 添加目标规则
    view: "目标规则: {name}"
  tls:
    caCertificates:
      label: CA 证书 (CA certificate)
      placeholder: "例如: /etc/certs/rootcacerts.pem"
    clientCertificate:
      error: 必须设置客户端证书。
      label: 客户端证书 (Client Certificate)
      placeholder: "例如: /etc/certs/myclientcert.pem"
    detail: 为连接到上游服务配置 TLS 相关设置
    label: TLS
    mode:
      disable:
        label: 禁用-不要设置到上游端点的 TLS 连接
      istio:
        label: Istio Mutual - 通过 Istio 实现与上游的双向安全连接
      label: TLS 模式
      mutual:
        label: Mutual - 通过提供客户端证书进行身份验证，使用双向 TLS 安全连接到上游
      none:
        label: 无
      simple:
        label: 简单-创建到上游端点的 TLS 连接
    privateKey:
      error: 必须设置私钥。
      label: 私钥 (Private Key)
      placeholder: "例如: /etc/certs/client_private_key.pem"
    sni:
      label: SNI
      placeholder: "例如: nginx.example.com"
    subjectAltNames:
      add: 添加主题备选名称
      label: 主题的备选名称
      placeholder: "例如: example.com"
cruVirtualService:
  gateways:
    add: 添加网关
    label: 网关
    placeholder: 选择或输入网关
    prompt: 选择网关...
  hosts:
    add: 添加主机
    error: 请选择或输入至少一个主机
    label: 主机
  http:
    routes:
      addRouteLabel: 添加 http 路由
      destination:
        addDestinationLabel: 增加目标地址
        host:
          error: 必须设置 Host。
          label: Host
        noDestinations: 没有目标地址
        port:
          label: Port
          placeholder: "例如: 8080 or myport"
        subset:
          label: Subset
          placeholder: "例如: v1"
        weight:
          error: 必须设置权重。
          label: 权重
          placeholder: "例如: 50"
      faultInjection:
        abort:
          httpStatus:
            label: HTTP 状态码
            placeholder: "例如: 400"
          label: 故障注入中止
          percent:
            label: 百分比
            placeholder: "例如: 8"
        delay:
          fixedDelay:
            label: 固定延迟
            placeholder: "例如: 5s"
          label: 故障注入延迟
          percent:
            label: 百分比
            placeholder: "例如: 8"
      label: HTTP 路由
      matches:
        addLabel: 添加其他匹配规则
        addMatchLabel: 添加匹配条件
        condition:
          exact: 精确匹配
          label: 条件
          prefix: 前缀匹配
          regex: 正则表达式匹配
        error: 请为匹配条件输入至少一个键值对
        key:
          label: 键
          placeholder: "例如: end-user"
        noData: 没有匹配规则
        noMatches: 没有匹配条件
        port:
          label: Port
          placeholder: "例如: 8080"
        removeLabel: 删除匹配规则
        showMatch: 指定此路由的匹配规则
        sourceLabels:
          addActionLabel: 添加源标签
          label: 源标签
        type:
          authority: Authority
          headers: Headers
          label: 匹配类型
          method: Method
          scheme: Scheme
          uri: URI
        value:
          authority:
            exact: "例如: eu.bookinfo.com"
            prefix: "例如: eu"
            regex: "例如: \".*?[.]eu[.]bookinfo[.]com\""
          headers:
            exact: "例如: jason"
            prefix: "例如: jason"
            regex: "例如: ja.*"
          label: 值
          method:
            exact: "例如: GET"
            prefix: "例如: GET"
            regex: "例如: ^.*(GET|POST).*$"
          scheme:
            exact: "例如: http"
            prefix: "例如: http"
            regex: "例如: h.*"
          uri:
            exact: "例如: /ratings/v2/"
            prefix: "例如: /ratings"
            regex: "例如: /ratings.*"
      mirror:
        host:
          label: Host
        label: 监控
        port:
          label: Port
          placeholder: "例如: 8080 or myport"
        subset:
          label: Subset
          placeholder: "例如: v2"
      moveDown: 向下移动
      moveUp: 向上移动
      noRoutes: 没有 http 路由
      redirect:
        authority:
          label: Authority
          placeholder: "例如: newratings.default.svc.cluster.local"
        error: 请不要同时配置目标地址和重定向。
        label: 重定向
        uri:
          label: URI
          placeholder: "例如: /v1/bookRatings"
      removeRouteLabel: 删除 http 路由
      retries:
        attempts:
          label: 重试次数
          placeholder: "例如: 3"
        label: 重试
        perTryTimeout:
          label: 每次重试超时
          placeholder: "例如: 2s"
      rewrite:
        authority:
          label: Authority
          placeholder: "例如: newratings.default.svc.cluster.local"
        label: 地址重写
        uri:
          label: URI
          placeholder: "例如: /v1/bookRatings"
      timeout:
        label: 超时
        placeholder: "例如: 5s"
  name:
    placeholder: "例如: myservice"
  title:
    edit: 编辑虚拟服务
    new: 添加虚拟服务
    view: "虚拟服务: {name}"
customMenus:
  index:
    clusterMenu: 集群级别自定义菜单
    globalMenu: 全局级别自定义菜单
    header: 自定义菜单
    projectMenu: 项目级别自定义菜单
    protocalInvalid: "\"链接地址\"应该以\"http://\"或者\"https://\"开头。"
dangerZone:
  description:
    auditlog-server-url: 配置审计日志服务地址。
    auth-token-max-ttl-minutes: 自定义认证 token 最大 TTL 分钟数 。
    auth-user-info-max-age-seconds: 在执行身份验证提供者组成员同步之前，用户身份验证令牌的最大有效期。
    auth-user-info-resync-cron: 用于重新同步身份验证提供者组成员关系的默认 cron 调度。
    auth-user-session-ttl-minutes: 用户验证会话上的自定义 TTL (以分钟为单位)。
    cacerts: 验证 ssl 证书所需的 CA 证书，此 CA 证书仅适用于自签名 SSL 证书。若 SSL 证书是权威 CA 机构所颁发，则要求删除此 CA 证书。
    cluster-defaults: 在创建新集群时覆盖 RKE 默认值。
    cluster-template-enforcement: 非管理员只能通过预先批准的集群模板启动集群。
    engine-install-url: 默认的 Docker 引擎安装 URL (用于大多数 Machine Drivers)。
    engine-iso-url: 默认 OS 安装 URL (用于 Machine vSphere Drivers)。
    engine-newest-version: 当前 Rancher Server 支持的最新 Docker 版本，不支持的版本或比此 Docker 版本新的将被标记为未测试。
    engine-supported-range: 当前 Rancher Server 支持的 Docker 版本范围，不满足此范围的 Docker 版本将在 UI 中标记为不受支持。
    extra-menus: 配置扩展菜单
    ingress-ip-domain: 用于自动生成 Ingress 主机名的通配域名。<code><入口名>.<命名空间名>.<入口控制器的 IP 地址> </code>将被添加到域名中。
    none-operate-session-time: 用户超过配置时间没有任何操作将自动注销(以秒为单位)
    rdns-base-url: 配置 RDNS 服务地址。
    rke-metadata-config: 配置 RKE 元数据刷新参数。
    server-url: 默认的 {appName} Server 访问地址，必须是 HTTPS。集群中的所有主机都必须能够访问此地址。
    system-default-registry: 用于 RKE 部署系统服务时镜像的拉取，其他服务拉取镜像不生效。
    telemetry-opt: 遥感报告设置。
    ui-banners: "分类横幅用于在页眉、页脚或同时在页眉、页脚显示自定义固定的横幅。该设置使用包含 3 个根参数的 JSON 对象: <code>banner、showHeader、showFooter</code>。banner 对象包含: <code>textColor、background、text</code>。 其中 <code>textColor 和 background</code> 是任意有效的 CSS 颜色值。"
    ui-dashboard-index: HTML index location for the Cluster Explorer UI.
    ui-default-landing: 用户登录后访问的默认页面。
    ui-footer-text: 额外的页脚内容
    ui-footer-url: 额外页脚内容对应的链接
    ui-index: UI HTML 索引位置。
    ui-issues: 使用一个 url 地址发送新的 'File an Issue' 报告，而不是将用户发送到 Github Issue 页面。
    ui-offline-preferred: Controls whether UI assets are served locally by the server container or from the remote URL defined in the ui-index and ui-dashboard-index settings.
    ui-pl: 企业名称专用标签
    ui-session-logout-minutes: 用户超过配置时间没有任何操作将自动注销(以分钟为单位)。
  header: 高级设置
  hide: 隐藏
  show: 显示
  showLabel: 我已确认修改高级设置可能导致 {appName} 出问题。
  subtext: 通常情况下用户不需要修改以下设置。请谨慎操作，不正确的值可能导致 {appName} 无法正常运行。修改默认设置后将以 <b>粗体</b> 显示配置名。
drainNode:
  action: 驱散
  aggressive:
    helpText: <b>永久删除</b> <ul class=m-0><li>独立 Pods 和它们的数据</li><li>配置了 Empty Dir 卷的 Pods 和它们的数据</li></ul>
    label: 强制
  deleteLocalData: 删除本地数据
  force: 强制
  gracePeriod:
    custom: 自定义延时终止时间
    default: 使用每个 Pod 中设置的默认延时时间
    placeholder: "例如: 30"
    title: "Pod 终止延时时间: "
    view:
      custom: 忽略默认值并给每个 pod 设置 {seconds} 秒
  safe:
    helpText: 如果节点拥有独立的 Pod 或临时的数据，它将被隔离但不会被驱散。
    label: 安全
  timeout:
    custom: "自定义超时时间: "
    default: 一直重试
    placeholder: "例如: 60"
    title: "驱散超时时间: "
    view:
      custom: "{seconds} 秒后放弃"
  titleMultiple: 驱散 {count} 个节点
  titleOne: "驱散节点: \"{name}\""
editAccount:
  form:
    confirmPassword:
      label: 确认密码
    description:
      label: 描述
      placeholder: "例如: John Smith 的账号"
    identity:
      label: 标识
    kind:
      admin: "管理员: 完全访问管理所有集群中的所有内容"
      label: 账号类型
      user: 普通用户
    name:
      label: 显示名称
      placeholder: "例如: John Smith"
    newPassword:
      label: 新密码
    oldPassword:
      label: 当前密码
    publicValue:
      label: 用户名
  title: 编辑账号
editYamlPipeline:
  branch:
    label: 分支
  title: 查看/编辑 YAML {name}
etcd:
  failedProposals:
    label: 失败提议次数
  hasLeader:
    label: Etcd 是否有 Leader
  leaderChange:
    label: Leader 变更次数
formAnnotations:
  addActionLabel: 添加注释
  detail: 配置容器的注释(键/值元数据)。
  errors:
    invalidJSON: JSON 注释格式无效。
    topLevelValueInvalid: JSON 注释顶级值必须是对象。
  title: 注释
formGlobalRoles:
  description: 控制用户管理整个 {appName} 安装的访问权限。
  loginError: 用户没有登录权限。管理员、标准用户或基础用户提供登录权限。
  mode:
    admin:
      detail: 管理员完全控制所有集群中的全部安装和所有资源。
      label: 管理员
    custom:
      detail: 定义更细粒度权限的附加角色。
      label: 内置
    readOnlyAdmin:
      detail: 只读管理员可以访问所有下游集群中的所有资源，但不能访问local集群
      label: 只读管理员
    restrictedAdmin:
      detail: 受限制的管理员可以完全控制所有下游集群中的所有资源，但不能访问 local 集群。
      label: 受限管理员
    user:
      detail: 标准用户可以创建新的集群并管理他们已被授权访问的集群和项目。
      label: 标准用户
    userBase:
      detail: 基础用户只有登录访问权限。
      label: 基础用户
    userCreated:
      detail: 非 Rancher 创建的角色。
      label: 自定义
      noDescription: 没有提供描述。
  role:
    authn-manage:
      detail: 允许用户启用，配置和禁用所有身份验证程序设置。
      label: 配置身份验证
    base:
      label: 登录访问
    catalogs-manage:
      detail: 允许用户添加，编辑和删除应用商店。
      label: 配置应用商店
    catalogs-use:
      detail: 允许用户查看和应用商店中的模板。标准用户默认具有此权限。
      label: 使用应用商店
    clusters-create:
      detail: 允许用户创建新的集群并成为它们的所有者，标准用户默认具有此权限。
      label: 创建新的集群
    clusters-manage:
      detail: 允许用户管理全部集群，即使这个用户不是被管理集群中的成员也可以管理。
      label: 管理所有集群
    clusterscans-manage:
      detail: 允许用户启动新的并管理 CIS 集群扫描。
      label: 管理 CIS 集群扫描
    clustertemplates-create:
      detail: 允许用户创建新的 RKE 集群模板并成为它们的所有者。
      label: 创建新的 RKE 集群模板
    features-manage:
      detail: 允许用户通过特性标志设置启用和禁用自定义特性。
      label: 配置功能标志
    kontainerdrivers-manage:
      detail: 允许用户创建新的集群驱动程序并成为它们的所有者。
      label: 创建新的集群驱动程序
    nodedrivers-manage:
      detail: 允许用户启用，配置和移除所有主机驱动设置。
      label: 配置主机驱动
    nodetemplates-manage:
      detail: 允许用户配置，编辑和删除主机模板。
      label: 管理主机模板
    nodetemplates-use:
      detail: 允许用户使用现有的主机模板部署新的主机。
      label: 使用主机模板
    podsecuritypolicytemplates-manage:
      detail: 允许用户定义、编辑和删除 PSPs。
      label: 管理 Pod 安全策略 (PSPs)
    roles-manage:
      detail: 允许用户配置，编辑和删除角色。
      label: 管理角色
    settings-manage:
      detail: 允许用户管理 Rancher 设置。
      label: 管理设置
    users-manage:
      detail: 允许用户为所有用户创建，删除和设置密码。
      label: 管理用户
    view-rancher-metrics:
      detail: 允许用户通过 API 查看指标。
      label: 查看 Rancher 指标
  title: 全局角色
formHostPortsPodSecurityPolicy:
  detail: 使用主机端口
  port:
    addLabel: 添加端口范围
    max:
      label: 最大值
      placeholder: "例如: 7000"
    min:
      label: 最小值
      placeholder: "例如: 6000"
  title: 主机端口策略
formKeyToPath:
  addAction: 添加项目
  default: 所有键
  header: 项目
  key:
    label: 键
    placeholder: "例如: username"
  mode:
    label: 模式
    placeholder: "例如: 400"
  path:
    label: 路径
    placeholder: "例如: my-group/my-username"
  specific: 选择特定的键
formMatchExpressions:
  addAction: 添加表达式
  key:
    label: 键
    placeholder: "例如: region"
  value:
    label: 值
    placeholder: "例如: us,eu,ap"
formatIp:
  noIp: 无
fromSecret:
  addFrom: 从密文中添加
  keyLabel: 变量
  keyPlaceholder: "例如: Foo"
  prefix:
    label: 别名
  prefixOrKey:
    label: 键
  secret:
    label: 密文
  valueLabel: 值
  valuePlaceholder: "例如: bar"
hpaPage:
  noData: 没有配置 HPA 规则
  noMatch: 没有匹配当前搜索的 HPA
  notSupported: 集群中 autoscaling/v2beta2 API 不可用。
  table:
    lastScaleTime:
      label: 上次扩缩容时间
    replicas:
      current: 副本
      desired: 期望
      range: 副本范围
    target:
      label: 目标应用
inputPassword:
  buttonText: 生成
k3sClusterInfo:
  detail: 自定义 K3S 集群选项
  drainServerNodes: 升级前驱散 Control Plane 节点
  drainWorkerNodes: 升级前驱散 Worker 节点
  nodeInfo:
    datail: 附加的 K3S 主节点详细信息
    detail: K3S 主节点参数和环境变量的只读视图。
    label: Control Plane Node
    selectPrompt: 选择节点
    title: K3s 节点信息
  serverConcurrency: 同时升级几个 Control Plane 节点
  title: K3S 选项
  workerConcurrency: 同时升级几个 Worker 节点
languageContribute: 帮助翻译 Rancher
modalConfirmDeactivate:
  buttons:
    default:
      button: 停用
      message: 停用
    environment:
      button: 停止服务
      message: 停止服务
    project:
      button: 停用
      message: 停用环境
  cancel: 取消
  clusterDriver: 您将不能再使用此驱动程序编辑集群配置。提供程序中的资源不会自动删除。
  header: 是否确认？
  nodeDriver: 您将无法在使用此驱动程序的节点池中创建、替换或删除节点。
  protip: "高级技巧: 在点击 {isServiceButton} 时按住 {key} 键以跳过确认操作。"
modalConfirmYaml2Form:
  confirm: 确认
  header: 您将从 YAML 编辑切换到表单编辑。
  helpText: 请注意，此列表并不包括所有的答案，您应该在保存前校验您的配置。当切换回表单编辑时，可能会发生数据丢失，以下字段已被标识为将丢失的字段。在点击确认之前，请确认丢失的字段不会受影响。
modalDownLoadFileComponent:
  container: 容器
  filePath: 文件路径
  noSuchFile: 文件不存在
  notice: 下载超过 600MiB 的文件有可能导致浏览器崩溃
  placeholder: 请输入容器中的文件路径
  serverError: 服务端发生错误
  title: 容器文件下载
  validateContainer: 请选择容器
  validatePath: 请输入要下载文件的路径
modalEditSetting:
  name:
    label: 名称
  reset:
    label: 重置为默认值
  title: 编辑高级设置
  value:
    label: 值
    prompt: 选择值...
modalImport:
  detail:
    cluster1: 如果资源指定了命名空间，那么会自动创建命名空间，但是不会自动加入到项目中。
    cluster2: 如果资源没有指定命名空间，它将被导入到 default 命名空间中。
    cluster3: "该模式还支持没有命名空间的资源，例如: RoleTemplates。"
    namespace1: 所有资源将被导入到选定的命名空间中。
    namespace2: 如果资源指定了不同的命名空间，则导入将失败。
    project1: 不指定命名空间的资源将被导入到选定的默认命名空间中。
    project2: 如果资源指定了不存在的命名空间，此命名空间将被创建并添加到这个项目中。
  mode:
    cluster: "集群: 将资源导入到此集群中"
    label: 导入模式
    namespace: "命名空间: 将资源导入指定的命名空间"
    project: "项目: 将资源导入此项目"
  title: 导入 YAML
modalResizePVC:
  currentValue:
    label: 当前大小
  protip: 卷扩容和调整大小是高级用例。强烈建议您阅读并充分了解存储提供商的要求。此外，在继续之前，您应该有一个灾难恢复计划。
  requestedCapacity:
    help: 更新PVCs容量可能不会在保存时立即反映出来。 卷扩容流程因storage class，PV Provisioner以及是否有任何工作负载附加到PVC而有所不同。在更改卷容量之前，强烈建议您访问<a href='https://rancher.com/docs/rancher/v2.x/en/cluster-admin/volumes-and-storage/' target='_blank' rel='nofollow noreferrer'>Rancher 存储文档</a> 和 <a href='https://kubernetes.io/docs/concepts/storage/persistent-volumes/' target='_blank' rel='nofollow noreferrer'>Kubernetes 持久卷文档</a>。
    label: 存储
  title: "扩容 PVC: {name}"
modalSaveRkeTemplate:
  name: 集群模板名称
  revName: 集群模板修订名称
  subtitle: 从当前集群配置创建一个新的 RKE 集群模板和初始修订。这将修改当前集群，设置集群以使用新创建的集群模板和修订。
  title: 通过 {clusterName} 创建 RKE 模板
newPipelineStep:
  header:
    create: 添加步骤
    edit: 编辑步骤
  stepType:
    applyApp:
      catalog:
        label: 应用商店
      catalogTemplate:
        helpText: 你可以选择已有应用模版或者输入新的模版。
        label: 应用模版
      label: 部署应用
      name:
        label: 应用名称
        placeholder: "例如: myapp"
      stepName: 部署应用
      targetNamespace:
        helpText: 部署应用的命名空间。
        label: 命名空间
      version:
        helpText: 你可以选择已有版本或者输入新的版本。
        label: 模版版本
    applyYaml:
      env:
        addActionLabel: 添加变量
        header: 环境变量
        keyPlaceholder: IMAGE_TAG
      errors:
        path:
          required: 请输入 YAML 路径。
      label: 部署 YAML
      yaml: YAML 路径
    build:
      buildContext: 构建上下文
      dockerFilePath: Dockerfile 路径
      errors:
        dockerfilePath:
          required: 请输入 Dockerfile 的路径。
        registry:
          required: 请选择镜像仓库。
        tag:
          required: 请输入镜像名称
      imageName:
        placeholder: "例如: example/app:v1"
      label: 构建并发布镜像
      noRegistry: 没有配置镜像仓库。您可以点击 <a href="{route}" target="_blank" rel="nofollow noreferrer">此处</a> 配置镜像仓库。
      pushRemote: 推送镜像到远端镜像仓库。
    enableBranch: 设置流水线
    env: 环境变量
    image: 基础镜像
    label: 步骤类型
    publishCatalog:
      auth:
        http: 密文中的 <code>USERNAME</code> 和 <code>PASSWORD</code> 将被作为用户名和密码。
        ssh: 密文中的 <code>DEPLOY_KEY</code> 将被作为 Deploy Key。
      catalogTemplate:
        helpText: 所发布应用模版的名称。
        label: 应用模版名称
        placeholder: "例如: wordpress"
      gitAuthor:
        helpText: 提交信息中所包含的作者信息。
        label: 作者
        placeholder: "例如: user"
      gitBranch:
        helpText: 把应用模版发布到这个 Git 分支。
        label: Git 分支
        placeholder: "例如: dev"
      gitEmail:
        helpText: 提交信息中所包含的作者邮箱信息。
        label: 作者邮箱
        placeholder: user@example.com
      gitUrl:
        error: Git 地址必须以 http 或 https 开头。
        helpText: 把应用模版发布到这个 Git 地址。
        label: Git 地址
        placeholder:
          http: "例如: https://github.com/myrepo/charts.git"
          ssh: "例如: git@github.com:myrepo/charts.git"
      label: 发布应用模版
      path:
        helpText: "代码库中 <code style=\"padding: 2px 5px;\">Chart.yaml</code> 所在的目录。"
        label: Chart 目录
        placeholder: "例如: ./charts/wordpress/latest"
      secret:
        label: 密文
        missingKey: 所选的密文没有 {key} 字段.
      stepName: 发布应用模版
      targets:
        http: 通过 HTTP(S) 协议发布到 Git
        label: 协议
        ssh: 通过 SSH 协议发布到 Git
      version:
        helpText: 所发布应用模版的版本。
        label: 应用模版版本
        placeholder: "例如: latest"
    scm:
      add: 选择代码库
      demoGroup: 示例代码库
      noWebhook: 没有设置代码库 webhooks 的权限
      noYaml: 代码库中没有发现 <code>.rancher-pipeline.yml</code> 文件。
      refresh: 刷新代码库
      selectRepository: 代码库
      trigger: 流水线触发
      user: 用户
    task:
      command:
        label: 命令
        placeholder: EntryPoint 的参数
      customEntryPoint: 自定义 EntryPoint
      entryPoint:
        label: EntryPoint
        placeholder: 该项留空将使用默认的 EntryPoint
      errors:
        image:
          required: 请输入基础镜像。
        shellScript:
          required: 请输入要运行的脚本。
      label: 运行脚本
      privileged:
        label: 以特权模式运行该步骤。
      secret: 从密文中注入环境变量
      shell:
        label: 脚本
      shellScript: 脚本
nodeGroup:
  label: "主机: {name}"
physicalStats:
  detail: 物理计算机属性
  title: 物理属性
pipelineDetailPage:
  activity:
    detail: 流水线的历史构建记录
    table:
      branch: "分支:"
      commit: 提交信息
      noData: 没有任何运行任务。
      noMatch: 没有运行任务符合当前搜索。
      runNumber: 运行编号
      status: 状态
      triggered: 触发时间
    title: 构建记录
  commitMessage: 提交信息
  header: "构建项目: {name}"
  lastRun: 最后运行
  repository: "代码库:"
  triggered: 触发时间
pipelineSelector:
  addRule: 添加规则
  branch: 分支
  event: 事件
  header: 触发规则
  pr: 拉取请求
  push: 推送
  table:
    type: 类型
    value: 值
  tag: Tag
  title:
    exclude: 当满足条件时不运行该 {type}
    include: 当满足条件时运行该 {type}
pipelineSetting:
  title: "流水线设置: \"{name}\""
projectsPage:
  addProject: 添加项目
  annotationsDetail: 为项目配置标签和注释。
  containerDefaultLimit:
    detail: 配置默认情况下容器可以消耗多少资源.
    title: 容器默认限制
  created:
    label: 创建时间
  editProject: 编辑项目
  groups:
    namespaces: 项目分组/命名空间分组
    none: 命名空间列表
  header: 项目/命名空间列表
  headerNS: 命名空间
  members:
    addGroup: 添加组
    addMember: 添加成员
    addServiceAccount: 添加服务帐户
    addUser: 添加用户
    customRoles: 自定义角色
    detail: 配置可以访问该项目中资源的用户以及用户权限。
    errors:
      memberNameReq: 成员名称必须设置。
      memberRoleReq: 成员角色必须设置。
      nameInExists: 名称已经存在，请使用新的项目名称。
      nameReq: 名称(必填)
    group: 用户组
    kind:
      label: 类型
    labelText: 成员
    multipleRoles: 多个角色
    name:
      label: 名称
    noAddUser: 您是唯一的活动注册用户.
    role:
      label: 角色
    serviceaccount: 服务账号
    title: 成员
    user: 用户
  name:
    label: 项目名称
    placeholder: "例如: lab"
  noData: 此集群没有配置任何项目。
  noMatch: 没有与当前搜索匹配的项目。
  ns:
    label: 命名空间
    placeholder: "例如: lab"
  psp:
    label: Pod 安全策略
  quota:
    label: 资源配额
  resourceQuota:
    detail: 配置整个项目可以使用多少资源。
    title: 资源配额
rolesPage:
  addRole: 添加角色
  editRole: 编辑角色
  headers:
    cluster: 集群
    global: 全局
    project: 项目
  index:
    errors:
      inherited: "角色 {displayName} 被: {roleNames} 继承"
    localLink: 添加角色
    table:
      builtin: 内置
      cluster: 新集群默认角色
      created: 创建时间
      enabled: 已启用
      global: 新用户默认角色
      id: Id
      name: 名称
      noData: 目前还没有角色
      noMatch: 没有与当前搜索匹配的角色
      project: 新项目默认角色
      showDefaults: 仅显示默认角色
      subjectKind: 类型
      template: 模板
    warning: 对于第三方登录认证的用户，需要配置一个角色作为新用户首次登录时默认的角色。当前环境未指定新用户默认值，请将其中一个角色设置为新用户默认值。
  inherit:
    detail: 继承其他角色的所有权限
    title: 角色继承
  new:
    errors:
      memberReq: 成员必需设置
      nameInExists: 名称已存在，请使用新的角色名称。
      nameReq: 名称 (必填)
      noSelectedRoles: 请为该用户至少选择一个角色。
      roleAlreadyExists: 用户已经具有 "{key}" 角色。
      roleTemplate: 角色模板必须选择
      ruleResourceReq: 资源必须选择
    form:
      allow:
        addAction: 添加资源
        apiGroups: API 组
        create: 创建
        delete: 删除
        deletecollection: 删除集合
        get: 获取
        labelText: 允许
        list: 列表
        nonResourceUrl: 非资源 URLs (仅路径)
        patch: 修补程序
        resource: 资源
        update: 更新
        watch: 观察
      context:
        detail: 此角色的适用范围适合在此展示。
        labelText: 上下文
      default:
        cluster: 新集群默认角色
        disabled: 否
        enabled:
          cluster: "是: 新集群的默认角色"
          global: "是: 新用户的默认角色"
          project: "是: 新项目的默认角色"
        global: 新用户默认角色
        project: 新项目默认角色
      locked:
        detail: 对已经绑定的用户没有影响
        disabled: 否
        enabled: "是: 不允许用户再绑定此角色，已绑定的用户不受影响。"
        labelText: 锁定
      name:
        labelText: 名称
        placeholder: "例如: 开发者"
      otherRole:
        addAction: 添加角色
        labelText: 包含其他角色
        role: 角色
      policy:
        addAction: 添加策略
        policy: 策略
  resources:
    detail: 对 Kubernetes 资源的具体操作进行授权。
    title: 资源授权
  saveEdit: 编辑
  saveNew: 创建
  title: 角色
schema:
  inputBoolean:
    n: 否
    y: 是
  inputCertificate:
    prompt: 选择证书...
  inputConfigMap:
    prompt: 选择配置映射
  inputContainer:
    prompt: 选择容器...
  inputDnsRecord:
    prompt: 选择服务...
  inputEnum:
    option: 选择选项...
  inputHost:
    label: 选择主机...
  inputMacvlansubnet:
    notSupport: 当前集群不支持 Macvlansubnet
    prompt: 请选择 Macvlansubnet...
  inputSecret:
    certificate: 选择证书...
    secret: 选择密文...
  inputService:
    custom: 自定义
    prompt: 选择工作负载...
  inputStorageClass:
    prompt: 使用默认的类
tableCountSelect:
  header: 每页显示行数
waitOrchestration:
  count: ({sub}/{count})
